"""
#This function searches for the RAP/RUC forecast data on the NOMADS THREDDS SERVER and builds a prior from it.
def getHourlyProfiles(yyyymmddhh, fff, aeri_lat, aeri_lon, size, aerioe_hght):
    #This function is used if the RAP data cannot be found on the Motherlode server.

    rap_path = 'http://nomads.ncdc.noaa.gov/thredds/dodsC/rap130/' + yyyymmddhh[:6] + '/' + yyyymmddhh[:8] + \
        '/rap_130_' + yyyymmddhh[:8] + '_' + yyyymmddhh[8:10] + '00_' + fff + '.grb2'
   
    #ruc_path = 'http://nomads.ncdc.noaa.gov/thredds/dodsC/ruc252/' + yyyymmddhh[:6] + '/' + yyyymmddhh[:8] + \
    #    '/ruc2_252_' + yyyymmddhh[:8] + '_' + yyyymmddhh[8:10] + '00_' + fff + '.grb'
    
    found = False
    for i in range(1,6):
        try:
            print "Attempting to find: " + rap_path
            d = Dataset(rap_path)
            print "RAP 13 km data found."
            type = "RAP13km"
            path = rap_path
            latlon_path = '13km_latlon.nc'
            found = True
            break
        except:
            print "Unable to find data on attempt " + str(i)
            continue
    if found == False:
        for i in range(1,6):
            try:
                print "RAP data not found."
                print "Attempting to find: " + ruc_path
                d = Dataset(ruc_path)
                print "RUC 20 km data found."
                type = "RUC20km"
                path = ruc_path
                latlon_path = '20km_latlon.nc'
                found = True
                break
            except:
                print "Unable to find data on attempt " + str(i)
                continue

    if found == False:
        print "Data not found on the server, aborting."
        print yyyymmddhh + 'F' + fff
        print "\n"
        print "Maybe you should try using a GFS/CFS based prior instead?"
        sys.exit()

    try:
        pres = d.variables['pressure'][:]
    except:
        pres = d.variables['isobaric'][:]*100.
    
    ll = Dataset(latlon_path)
    lon = ll.variables['lon'][:]
    lat = ll.variables['lat'][:]
    idy, idx = utils.find_index_of_nearest_xy(lon, lat, aeri_lon, aeri_lat)
    size = int(size)
    temp =  d.variables['Temperature'][0,:,idy-size:idy+size,idx-size:idx+size]
    rh = d.variables['Relative_humidity'][0,:,idy-size:idy+size,idx-size:idx+size]
    hght = d.variables['Geopotential_height'][0,:,idy-size:idy+size,idx-size:idx+size]
    
    sfc_pres = d.variables['Pressure_surface'][0,idy-size:idy+size,idx-size:idx+size]
    sfc_hght = d.variables['Geopotential_height_surface'][0,idy-size:idy+size,idx-size:idx+size]
    sfc_temp = d.variables['Temperature_height_above_ground'][0,0,idy-size:idy+size,idx-size:idx+size]
    sfc_rh = d.variables['Relative_humidity_height_above_ground'][0,0,idy-size:idy+size,idx-size:idx+size]
    
    d.close()
    
    mxrs = []
    temps = []
    press = []
    rhs = []

    for index, x in np.ndenumerate(sfc_hght):
        idx_aboveground = np.where(sfc_hght[index] < hght[:,index[0], index[1]])[0]

        new_hght = (np.hstack((sfc_hght[index]+2, hght[idx_aboveground, index[0], index[1]])) - sfc_hght[index])/1000.
        new_temp = np.hstack((sfc_temp[index], temp[idx_aboveground, index[0], index[1]]))
        new_rh = np.hstack((sfc_rh[index], rh[idx_aboveground, index[0], index[1]]))
        new_pres = np.hstack((sfc_pres[index], pres[idx_aboveground]))
                
        new_q = utils.rh2q(new_temp, new_pres, new_rh/100.)*1000.
        
        oe_mxr = np.interp(aerioe_hght, new_hght, new_q)
        oe_temp = np.interp(aerioe_hght, new_hght, new_temp)
        oe_pres = np.interp(aerioe_hght, new_hght, new_pres)
        oe_rh = np.interp(aerioe_hght, new_hght, new_rh)
        mxrs.append(oe_mxr)
        temps.append(oe_temp)
        press.append(new_pres)
        rhs.append(oe_rh)

    temps = np.asarray(temps)
    mxrs = np.asarray(mxrs)
    rhs = np.asarray(rhs)

    return temps, mxrs, press, type, path
"""

# This is the code that gets called by run_prior_gen.py when we want to make a prior from
# ONLINE RUC/RAP data.
def getOnlineModelPrior(climo_prior, yyyymmdd, size, hh, hh_delta, aeri_lon, aeri_lat):
    #Load in latitude and longitude points for the RAP/RUC 13 km grid.
    print "This prior is centered at: " + str(aeri_lat) + ',' + str(aeri_lon)
    
    #Get the nearest grid point to the AERI location.

    climo = Dataset(climo_prior)
    aerioe_hght = climo.variables['height'][:]

    dt = datetime.strptime(yyyymmdd + hh, '%Y%m%d%H') - timedelta(seconds=int(hh_delta)*60*60)

    all_temps = None
    all_mxrs = None
    all_pres = None
    print "Gathering profiles within a " + str(2*size) + "x" + str(2*size) + " grid."
    types = []
    paths = []
    for i in range(0, int(hh_delta)*2,1):
        dt_string = datetime.strftime(dt, '%Y%m%d%H')
        forecast_hour = (3-len(str(i)))*'0' + str(i) 
        print "Gathering profiles for model run on " + dt_string + " F" + forecast_hour
        # This only searches the NOMADS THREDDS Server
        temp, mxr, pres, type, link = getHourlyProfiles(dt_string, forecast_hour, aeri_lat, aeri_lon, size, aerioe_hght)
        paths.append(link)
        types.append(type)
        
        if all_temps is None:
            all_temps = temp
            all_mxrs = mxr
            #all_pres = pres
        else:
            all_temps = np.vstack((all_temps, temp))
            all_mxrs = np.vstack((all_mxrs, mxr))
            #all_pres = np.vstack((all_pres, pres))

    all_temps = all_temps - 273.15
    print paths, types
    print "Shape of the temperature profiles: ", all_temps.shape
    print "Shape of the water vapor mixing ratio profiles: ", all_temps.shape
    priors = np.hstack((all_temps, all_mxrs))
    
    print "Shape of the prior: ", priors.shape
    mean = np.mean(priors, axis=0)
    print "Xa: ", mean.shape
    cov = np.cov(priors.T)
    print "Sa: ", cov.shape
 
    return mean, cov, climo, types, paths, yyyymmdd, hh, priors.shape[0]

